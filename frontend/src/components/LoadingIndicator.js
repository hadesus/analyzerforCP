import React from 'react';

const LoadingIndicator = ({ currentStage = 'parsing', progress = 0 }) => {
  const stages = [
    { key: 'parsing', label: '–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞', icon: 'üìÑ', description: '–ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞' },
    { key: 'extraction', label: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤', icon: 'üî¨', description: '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é NLP' },
    { key: 'normalization', label: '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π', icon: 'üè∑Ô∏è', description: '–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ú–ù–ù –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤' },
    { key: 'regulatory', label: '–†–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏', icon: 'üèõÔ∏è', description: '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö' },
    { key: 'pubmed', label: '–ü–æ–∏—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π', icon: 'üìö', description: '–ò—â–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ PubMed' },
    { key: 'analysis', label: '–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑', icon: 'üìä', description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º GRADE –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é LLM' }
  ];

  const currentStageIndex = stages.findIndex(stage => stage.key === currentStage);
  const currentStageData = stages[currentStageIndex] || stages[0];

  return (
    <div className="loading-container fade-in-up">
      <div className="loading-spinner"></div>
      <div className="loading-text">–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</div>
      <div className="loading-stage">
        <div className="stage-icon">{currentStageData.icon}</div>
        <div className="stage-info">
          <div className="stage-title">{currentStageData.label}</div>
          <div className="stage-description">{currentStageData.description}</div>
        </div>
      </div>
      
      <div className="progress-container">
        <div className="progress-bar">
          <div 
            className="progress-fill" 
            style={{ width: `${Math.max(progress, (currentStageIndex + 1) / stages.length * 100)}%` }}
          ></div>
        </div>
        <div className="progress-text">{Math.round(Math.max(progress, (currentStageIndex + 1) / stages.length * 100))}%</div>
      </div>

      <div className="stages-list">
        {stages.map((stage, index) => (
          <div 
            key={stage.key} 
            className={`stage-item ${index <= currentStageIndex ? 'completed' : ''} ${index === currentStageIndex ? 'active' : ''}`}
          >
            <div className="stage-marker">
              {index < currentStageIndex ? '‚úÖ' : index === currentStageIndex ? stage.icon : '‚è≥'}
            </div>
            <span className="stage-label">{stage.label}</span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default LoadingIndicator;