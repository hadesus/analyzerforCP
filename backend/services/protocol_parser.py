@@ .. @@
 
 logger = logging.getLogger(__name__)
 
+# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
+GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
+if not GEMINI_API_KEY:
+    logger.error("‚ùå GEMINI_API_KEY not found in environment variables")
+    raise ValueError("GEMINI_API_KEY is required")
+
+# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
+genai.configure(api_key=GEMINI_API_KEY)
+model = genai.GenerativeModel('gemini-2.0-flash-exp')
+
 async def extract_drugs_from_text(text: str) -> List[Dict]:
     """
     –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –≤ –¥–µ–º–æ –≤–µ—Ä—Å–∏–∏
@@ .. @@
     
     try:
         logger.info("ü§ñ Calling Gemini API for drug extraction...")
-        
-        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
-        GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
-        if not GEMINI_API_KEY:
-            raise ValueError("GEMINI_API_KEY not found in environment variables")
-        
-        genai.configure(api_key=GEMINI_API_KEY)
-        model = genai.GenerativeModel('gemini-2.0-flash-exp')
-        
         response = model.generate_content(prompt)
         
         if not response or not response.text:
@@ .. @@
     
     try:
         logger.info("üìù Generating document summary with Gemini...")
-        
-        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
-        GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
-        if not GEMINI_API_KEY:
-            raise ValueError("GEMINI_API_KEY not found in environment variables")
-        
-        genai.configure(api_key=GEMINI_API_KEY)
-        model = genai.GenerativeModel('gemini-2.0-flash-exp')
-        
         response = model.generate_content(summary_prompt)
         
         if response and response.text: